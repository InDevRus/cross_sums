from tests.test_decorators import *
import unittest

from logic import solver
from logic.puzzle_maker import make_puzzle


class SolverTests(unittest.TestCase):
    @assert_equality(solver.find_unique_combinations)
    def test_find_unique_combinations(self):
        return (iter(iter(range(1, 10))
                     | select(lambda number: (number, 1,
                                              {frozenset({number})})))
                | chain_with([(9, 1, {frozenset({9})}),
                              (10, 3,
                               {frozenset({1, 2, 7}), frozenset({1, 3, 6}),
                                frozenset({1, 4, 5}), frozenset({2, 3, 5})}),
                              (34, 7, {frozenset({1, 2, 3, 4, 7, 8, 9}),
                                       frozenset({1, 2, 3, 5, 6, 8, 9}),
                                       frozenset({1, 2, 4, 5, 6, 7, 9}),
                                       frozenset({1, 3, 4, 5, 6, 7, 8})})])
                | as_tuple)

    @assert_equality(lambda left, right:
                     len(solver.find_unique_combinations(left, right)))
    @append_arguments(1, position=3)
    def test_combination_table(self):
        return [[3, 2], [4, 2], [16, 2], [17, 2], [6, 3], [7, 3], [23, 3],
                [24, 3], [10, 4], [11, 4], [29, 4], [30, 4], [15, 5],
                [16, 5], [34, 5], [35, 5], [21, 6], [22, 6], [38, 6],
                [39, 6], [28, 7], [29, 7], [41, 7], [42, 7],
                *iter(range(36, 45)) | select(lambda number: [number, 8]),
                [45, 9]]

    @assert_equality(
        lambda left, right:
        0 <= len(solver.find_unique_combinations(left, right)) <= 12)
    @append_arguments(True, position=3)
    def test_all_combinations(self):
        return [[number, quantity]
                for number in range(1, 46) for quantity in range(1, 10)]

    @assert_equality(solver.get_block)
    def test_get_block(self):
        string = StringIO(':   23: 30:   :     :     27: 12: 16:\n'
                          ':16 _   _     :     17:24 _   _   _\n'
                          ':17 _   _     15:29 _     _   _   _\n'
                          ':35 _   _     _     _     _   12: :\n'
                          ':   :7  _     _     7:8   _   _   7:\n'
                          ':   11: 10:16 _     _     8   _   _\n'
                          ':21 _   _     _     _     :5  _   _\n'
                          ':6  _   _     _     :     :3  _   _')
        puzzle = make_puzzle(string)
        return [[puzzle, (2, 3), False,
                 (15, [(number, 3) for number in range(3, 8)], frozenset())],
                [puzzle, (3, 0), True,
                 (35, [(3, number) for number in range(1, 6)], frozenset())],
                [puzzle, (5, 2), True,
                 (8, [(5, 3), (5, 4), (5, 6), (5, 7)], frozenset({8}))]]

    @assert_equality(lambda subject: subject)
    def test_fill_block(self):
        string = StringIO(':   23: 30:   :     :     27: 12: 16:\n'
                          ':16 _   _     :     17:24 _   _   _\n'
                          ':17 _   _     15:29 _     _   _   _\n'
                          ':35 _   _     _     _     _   12: :\n'
                          ':   :7  _     _     7:8   _   _   7:\n'
                          ':   11: 10:16 _     _     _   _   _\n'
                          ':21 _   _     _     _     :5  _   _\n'
                          ':6  _   _     _     :     :3  _   _')
        puzzle = make_puzzle(string)
        [solver.fill_block(puzzle, cell, False) for cell in ((4, 7), (0, 2))]
        [solver.fill_block(puzzle, cell, True) for cell in ((5, 2),)]
        return [*((puzzle.get((number, 2)),
                   {*range(6, 10)}) for number in range(1, 5)),
                *((puzzle.get((number, 7)),
                   {1, 2, 4}) for number in range(5, 8)),
                *((puzzle.get((number, 7)),
                   {1, 2, 4}) for number in range(5, 8))]

    @assert_equality(solver.fill_free_cells)
    def test_fill_free_cells(self):
        string = StringIO(':   23: 30:   :     :     27: 12: 16:\n'
                          ':16 _   _     :     17:24 _   _   _\n'
                          ':17 _   _     15:29 _     _   _   _\n'
                          ':35 _   _     _     _     _   12: :\n'
                          ':   :7  _     _     7:8   _   _   7:\n'
                          ':   11: 10:16 _     _     _   _   _\n'
                          ':21 _   _     _     _     :5  _   _\n'
                          ':6  _   _     _     :     :3  _   _')
        puzzle = make_puzzle(string)
        return [(puzzle,
                 {(0, 0): None, (0, 1): (23, None), (0, 2): (30, None),
                  (0, 3): None, (0, 4): None, (0, 5): (27, None),
                  (0, 6): (12, None), (0, 7): (16, None), (1, 0): (None, 16),
                  (1, 1): {9}, (1, 2): {9, 7}, (1, 3): None, (1, 4): (17, 24),
                  (1, 5): {8, 9, 7}, (1, 6): {8, 9, 7}, (1, 7): {9, 7},
                  (2, 0): (None, 17), (2, 1): {8, 9}, (2, 2): {8, 9},
                  (2, 3): (15, 29), (2, 4): {8, 9}, (2, 5): {8, 9, 5, 7},
                  (2, 6): {8, 9, 5, 7}, (2, 7): {9, 7}, (3, 0): (None, 35),
                  (3, 1): {8, 9, 6}, (3, 2): {8, 9, 6, 7}, (3, 3): {5},
                  (3, 4): {8, 9}, (3, 5): {5, 6, 7, 8, 9}, (3, 6): (12, None),
                  (3, 7): None, (4, 0): None, (4, 1): (None, 7), (4, 2): {6},
                  (4, 3): {1, 2, 3, 4, 5}, (4, 4): (7, 8),
                  (4, 5): {1, 2, 3, 5, 6, 7}, (4, 6): {1, 2, 3, 5, 6},
                  (4, 7): (7, None), (5, 0): None, (5, 1): (11, None),
                  (5, 2): (10, 16), (5, 3): {1, 2, 3, 4},
                  (5, 4): {1, 2, 3, 4, 6}, (5, 5): {1, 2, 3, 4, 6},
                  (5, 6): {1, 2, 3, 4, 6}, (5, 7): {1, 2, 4},
                  (6, 0): (None, 21), (6, 1): {2, 3, 4, 5, 6, 7, 8, 9},
                  (6, 2): {1, 2, 3, 4, 6, 7, 8, 9}, (6, 3): {1, 2, 3, 4, 5},
                  (6, 4): {1, 2, 3, 4, 5, 6}, (6, 5): (None, 5),
                  (6, 6): {1, 2, 3, 4}, (6, 7): {1, 2, 4}, (7, 0): (None, 6),
                  (7, 1): {2, 3}, (7, 2): {1, 2, 3}, (7, 3): {1, 2, 3},
                  (7, 4): None, (7, 5): (None, 3), (7, 6): {1, 2},
                  (7, 7): {1, 2}})]

    @assert_equality(solver.get_neighbor_cells, iterable=True, out_type=set)
    def test_get_neighbor_cells(self):
        string = StringIO(':   23: 30:   :     :     27: 12: 16:\n'
                          ':16 _   _     :     17:24 _   _   9\n'
                          ':17 _   _     15:29 _     _   _   _\n'
                          ':35 _   _     _     _     _   12: :\n'
                          ':   :7  _     _     7:8   _   _   7:\n'
                          ':   11: 10:16 _     _     _   _   _\n'
                          ':21 _   _     _     _     :5  _   _\n'
                          ':6  _   _     _     :     :3  _   _')
        puzzle = make_puzzle(string)
        return [(puzzle, (3, 2),
                 {(3, 1), (3, 3), (3, 4), (3, 5), (1, 2), (2, 2), (4, 2)}),
                (puzzle, (6, 4), {(6, 1), (6, 2), (6, 3), (5, 4)}),
                (puzzle, (1, 5), {(1, 6), (2, 5), (3, 5), (4, 5), (5, 5)})]

    @assert_equality(solver.reduce_puzzle)
    def test_reduce_puzzle(self):
        string = StringIO(':   23: 30:   :     :     27: 12: 16:\n'
                          ':16 _   _     :     17:24 _   _   _\n'
                          ':17 _   _     15:29 _     _   _   _\n'
                          ':35 _   _     _     _     _   12: :\n'
                          ':   :7  _     _     7:8   _   _   7:\n'
                          ':   11: 10:16 _     _     _   _   _\n'
                          ':21 _   _     _     _     :5  _   _\n'
                          ':6  _   _     _     :     :3  _   _')
        puzzle = make_puzzle(string)
        return [(puzzle, {(0, 0): None, (0, 1): (23, None), (0, 2): (30, None),
                          (0, 3): None, (0, 4): None, (0, 5): (27, None),
                          (0, 6): (12, None), (0, 7): (16, None),
                          (1, 0): (None, 16), (1, 1): 9, (1, 2): 7,
                          (1, 3): None, (1, 4): (17, 24), (1, 5): {8, 9},
                          (1, 6): {8, 9, 7}, (1, 7): {9, 7},
                          (2, 0): (None, 17), (2, 1): 8, (2, 2): 9,
                          (2, 3): (15, 29), (2, 4): 8, (2, 5): {9, 5},
                          (2, 6): {9, 5, 7}, (2, 7): {9, 7},
                          (3, 0): (None, 35), (3, 1): 6, (3, 2): 8, (3, 3): 5,
                          (3, 4): 9, (3, 5): 7, (3, 6): (12, None),
                          (3, 7): None, (4, 0): None, (4, 1): (None, 7),
                          (4, 2): 6, (4, 3): 1, (4, 4): (7, 8),
                          (4, 5): {1, 2, 3, 5, 6}, (4, 6): {1, 2, 3, 5, 6},
                          (4, 7): (7, None), (5, 0): None, (5, 1): (11, None),
                          (5, 2): (10, 16), (5, 3): {2, 3, 4},
                          (5, 4): {1, 2, 3, 4, 6}, (5, 5): {1, 2, 3, 4, 6},
                          (5, 6): {1, 2, 3, 4, 6}, (5, 7): {1, 2, 4},
                          (6, 0): (None, 21), (6, 1): {2, 3, 4, 5, 6, 7, 8, 9},
                          (6, 2): {1, 2, 3, 4, 6, 7, 8, 9}, (6, 3): {2, 3, 4},
                          (6, 4): {1, 2, 3, 4, 5, 6}, (6, 5): (None, 5),
                          (6, 6): {1, 2, 3, 4}, (6, 7): {1, 2, 4},
                          (7, 0): (None, 6), (7, 1): {2, 3}, (7, 2): {1, 2, 3},
                          (7, 3): {2, 3}, (7, 4): None, (7, 5): (None, 3),
                          (7, 6): {1, 2}, (7, 7): {1, 2}})]

    @assert_raises(solver.reduce_puzzle, RuntimeError,
                   'No possible number after reduce in \d+ line, \d+ token.')
    def test_unsolvable_test_after_reduce(self):
        string = StringIO(':   17:\n'
                          ':8   _  \n'
                          ':8 _  \n')
        puzzle = make_puzzle(string)
        puzzle = solver.fill_free_cells(puzzle)
        return [[puzzle]]

    @assert_equality(lambda subject:
                     solver.exclude_impossible_numbers(
                         solver.reduce_puzzle(make_puzzle(subject))))
    @wrap_string_in_io()
    def test_exclude_impossible_numbers(self):
        return [[':   :   :     15: 19: : \n'
                 ':   :   :3    _   _   7:\n'
                 ':   17: 12:12 _   _   _ \n'
                 ':27 _   _     _   _   _ \n'
                 ':21 _   _     _   :   : \n'
                 ':   :7  _     _   :   : ',
                 {(0, 0): None, (0, 1): None, (0, 2): None, (0, 3): (15, None),
                  (0, 4): (19, None), (0, 5): None, (1, 0): None, (1, 1): None,
                  (1, 2): (None, 3), (1, 3): 1, (1, 4): 2, (1, 5): (7, None),
                  (2, 0): None, (2, 1): (17, None), (2, 2): (12, 12),
                  (2, 3): 2, (2, 4): 9, (2, 5): 1, (3, 0): (None, 27),
                  (3, 1): 9, (3, 2): 1, (3, 3): 3, (3, 4): 8, (3, 5): 6,
                  (4, 0): (None, 21), (4, 1): 8, (4, 2): 9, (4, 3): 4,
                  (4, 4): None, (4, 5): None, (5, 0): None, (5, 1): (None, 7),
                  (5, 2): 2, (5, 3): 5, (5, 4): None, (5, 5): None}],
                [':   23: 30:   :     :     27: 12: 16:\n'
                 ':16 _   _     :     17:24 _   _   _\n'
                 ':17 _   _     15:29 _     _   _   _\n'
                 ':35 _   _     _     _     _   12: :\n'
                 ':   :7  _     _     7:8   _   _   7:\n'
                 ':   11: 10:16 _     _     _   _   _\n'
                 ':21 _   _     _     _     :5  _   _\n'
                 ':6  _   _     _     :     :3  _   _',
                 {(0, 0): None, (0, 1): (23, None), (0, 2): (30, None),
                  (0, 3): None, (0, 4): None, (0, 5): (27, None),
                  (0, 6): (12, None), (0, 7): (16, None), (1, 0): (None, 16),
                  (1, 1): 9, (1, 2): 7, (1, 3): None, (1, 4): (17, 24),
                  (1, 5): 8, (1, 6): 7, (1, 7): 9, (2, 0): (None, 17),
                  (2, 1): 8, (2, 2): 9, (2, 3): (15, 29), (2, 4): 8, (2, 5): 9,
                  (2, 6): 5, (2, 7): 7, (3, 0): (None, 35), (3, 1): 6,
                  (3, 2): 8, (3, 3): 5, (3, 4): 9, (3, 5): 7,
                  (3, 6): (12, None), (3, 7): None, (4, 0): None,
                  (4, 1): (None, 7), (4, 2): 6, (4, 3): 1, (4, 4): (7, 8),
                  (4, 5): 2, (4, 6): 6, (4, 7): (7, None), (5, 0): None,
                  (5, 1): (11, None), (5, 2): (10, 16), (5, 3): 4, (5, 4): 6,
                  (5, 5): 1, (5, 6): 3, (5, 7): 2, (6, 0): (None, 21),
                  (6, 1): 8, (6, 2): 9, (6, 3): 3, (6, 4): 1,
                  (6, 5): (None, 5), (6, 6): 1, (6, 7): 4, (7, 0): (None, 6),
                  (7, 1): 3, (7, 2): 1, (7, 3): 2, (7, 4): None,
                  (7, 5): (None, 3), (7, 6): 2, (7, 7): 1}]]

    @assert_equality(lambda subject: solver.solve_puzzle(make_puzzle(subject)))
    @wrap_string_in_io()
    def test_solve_difficult_puzzle(self):
        return [[':     :     :     27:   9:    6:\n'
                 ':     :     14:7  _     _     1\n'
                 ':     10:14 _     _     _     2\n'
                 ':16   _     _     _     _     3\n'
                 ':24   _     _     _     :     :\n'
                 ':5    _     _     :     :     :',
                 {(0, 0): None, (0, 1): None, (0, 2): None, (0, 3): (27, None),
                  (0, 4): (9, None), (0, 5): (6, None), (1, 0): None,
                  (1, 1): None, (1, 2): (14, 7), (1, 3): 4, (1, 4): 2,
                  (1, 5): 1, (2, 0): None, (2, 1): (10, 14), (2, 2): 1,
                  (2, 3): 8, (2, 4): 3, (2, 5): 2, (3, 0): (None, 16),
                  (3, 1): 1, (3, 2): 2, (3, 3): 6, (3, 4): 4, (3, 5): 3,
                  (4, 0): (None, 24), (4, 1): 7, (4, 2): 8, (4, 3): 9,
                  (4, 4): None, (4, 5): None, (5, 0): (None, 5), (5, 1): 2,
                  (5, 2): 3, (5, 3): None, (5, 4): None, (5, 5): None}],
                [': 42: 40: : 23: 29: 3: 21: 11: : 38: 16:\n'
                 ':5 _ _ :28 _ _ _ _ _ 14:13 _ _\n'
                 ':14 _ _ 9:37 _ _ _ _ _ _ _ _\n'
                 ':24 _ _ _ _ _ 11:10 _ _ _ _ 16:\n'
                 ':20 _ _ _ :11 _ _ 13:12 _ _ _ _\n'
                 ':15 _ _ : : :4 _ _ 15:14 _ _ _\n'
                 ':8 _ _ 20: : 12:6 _ _ _ 17:16 _ _\n'
                 ':23 _ _ _ 32:29 _ _ _ _ _ _ _\n'
                 ': :14 _ _ _ _ :19 _ _ _ _ :\n'
                 ': : 44:8 _ _ 19: : 16:9 _ _ 39: :\n'
                 ': 20:15 _ _ _ _ 14:14 _ _ _ _ 29:\n'
                 ':36 _ _ _ _ _ _ _ :21 _ _ _\n'
                 ':6 _ _ 11:10 _ _ _ : : :4 _ _\n'
                 ':20 _ _ _ 13:12 _ _ 20: : 6:10 _ _\n'
                 ':18 _ _ _ _ 15:14 _ _ 19:17 _ _ _\n'
                 ': 10:29 _ _ _ _ 17:16 _ _ _ _ _\n'
                 ':38 _ _ _ _ _ _ _ _ :11 _ _\n'
                 ':16 _ _ :25 _ _ _ _ _ :3 _ _',
                 {(0, 0): None, (0, 1): (42, None), (0, 2): (40, None),
                  (0, 3): None, (0, 4): (23, None), (0, 5): (29, None),
                  (0, 6): (3, None), (0, 7): (21, None), (0, 8): (11, None),
                  (0, 9): None, (0, 10): (38, None), (0, 11): (16, None),
                  (1, 0): (None, 5), (1, 1): 3, (1, 2): 2, (1, 3): (None, 28),
                  (1, 4): 9, (1, 5): 7, (1, 6): 1, (1, 7): 8, (1, 8): 3,
                  (1, 9): (14, 13), (1, 10): 4, (1, 11): 9, (2, 0): (None, 14),
                  (2, 1): 8, (2, 2): 6, (2, 3): (9, 37), (2, 4): 6, (2, 5): 5,
                  (2, 6): 2, (2, 7): 9, (2, 8): 1, (2, 9): 4, (2, 10): 3,
                  (2, 11): 7, (3, 0): (None, 24), (3, 1): 4, (3, 2): 1,
                  (3, 3): 2, (3, 4): 8, (3, 5): 9, (3, 6): (11, 10), (3, 7): 4,
                  (3, 8): 2, (3, 9): 3, (3, 10): 1, (3, 11): (16, None),
                  (4, 0): (None, 20), (4, 1): 9, (4, 2): 4, (4, 3): 7,
                  (4, 4): (None, 11), (4, 5): 8, (4, 6): 3, (4, 7): (13, 12),
                  (4, 8): 5, (4, 9): 1, (4, 10): 2, (4, 11): 4,
                  (5, 0): (None, 15), (5, 1): 7, (5, 2): 8, (5, 3): None,
                  (5, 4): None, (5, 5): (None, 4), (5, 6): 1, (5, 7): 3,
                  (5, 8): (15, 14), (5, 9): 6, (5, 10): 5, (5, 11): 3,
                  (6, 0): (None, 8), (6, 1): 5, (6, 2): 3, (6, 3): (20, None),
                  (6, 4): None, (6, 5): (12, 6), (6, 6): 2, (6, 7): 1,
                  (6, 8): 3, (6, 9): (17, 16), (6, 10): 9, (6, 11): 7,
                  (7, 0): (None, 23), (7, 1): 6, (7, 2): 9, (7, 3): 8,
                  (7, 4): (32, 29), (7, 5): 8, (7, 6): 5, (7, 7): 4, (7, 8): 1,
                  (7, 9): 3, (7, 10): 6, (7, 11): 2, (8, 0): None,
                  (8, 1): (None, 14), (8, 2): 7, (8, 3): 1, (8, 4): 2,
                  (8, 5): 4, (8, 6): (None, 19), (8, 7): 5, (8, 8): 4,
                  (8, 9): 2, (8, 10): 8, (8, 11): None, (9, 0): None,
                  (9, 1): None, (9, 2): (44, 8), (9, 3): 2, (9, 4): 6,
                  (9, 5): (19, None), (9, 6): None, (9, 7): (16, 9), (9, 8): 5,
                  (9, 9): 4, (9, 10): (39, None), (9, 11): None, (10, 0): None,
                  (10, 1): (20, 15), (10, 2): 2, (10, 3): 3, (10, 4): 9,
                  (10, 5): 1, (10, 6): (14, 14), (10, 7): 7, (10, 8): 2,
                  (10, 9): 1, (10, 10): 4, (10, 11): (29, None),
                  (11, 0): (None, 36), (11, 1): 1, (11, 2): 3, (11, 3): 6,
                  (11, 4): 8, (11, 5): 7, (11, 6): 2, (11, 7): 9,
                  (11, 8): (None, 21), (11, 9): 7, (11, 10): 9, (11, 11): 5,
                  (12, 0): (None, 6), (12, 1): 2, (12, 2): 4,
                  (12, 3): (11, 10), (12, 4): 7, (12, 5): 2, (12, 6): 1,
                  (12, 7): None, (12, 8): None, (12, 9): (None, 4),
                  (12, 10): 1, (12, 11): 3, (13, 0): (None, 20), (13, 1): 8,
                  (13, 2): 9, (13, 3): 3, (13, 4): (13, 12), (13, 5): 9,
                  (13, 6): 3, (13, 7): (20, None), (13, 8): None,
                  (13, 9): (6, 10), (13, 10): 8, (13, 11): 2,
                  (14, 0): (None, 18), (14, 1): 9, (14, 2): 6, (14, 3): 1,
                  (14, 4): 2, (14, 5): (15, 14), (14, 6): 8, (14, 7): 6,
                  (14, 8): (19, 17), (14, 9): 4, (14, 10): 5, (14, 11): 8,
                  (15, 0): None, (15, 1): (10, 29), (15, 2): 8, (15, 3): 5,
                  (15, 4): 7, (15, 5): 9, (15, 6): (17, 16), (15, 7): 1,
                  (15, 8): 4, (15, 9): 2, (15, 10): 3, (15, 11): 6,
                  (16, 0): (None, 38), (16, 1): 1, (16, 2): 5, (16, 3): 2,
                  (16, 4): 3, (16, 5): 4, (16, 6): 9, (16, 7): 8, (16, 8): 6,
                  (16, 9): (None, 11), (16, 10): 7, (16, 11): 4,
                  (17, 0): (None, 16), (17, 1): 9, (17, 2): 7,
                  (17, 3): (None, 25), (17, 4): 1, (17, 5): 2, (17, 6): 8,
                  (17, 7): 5, (17, 8): 9, (17, 9): (None, 3), (17, 10): 2,
                  (17, 11): 1}]]

    @assert_equality(lambda subject: solver.yield_all_possible_solutions
                     (solver.solve_puzzle(make_puzzle(subject))),
                     iterable=True, orderless=True)
    @wrap_string_in_io()
    def test_multiple_solutions(self):
        return [[': 5: 4:\n:4 _ _\n:5 _ _',
                 ({(0, 0): None, (0, 1): (5, None),  (0, 2): (4, None),
                   (1, 0): (None, 4), (1, 1): 1, (1, 2): 3, (2, 0): (None, 5),
                   (2, 1): 4, (2, 2): 1},
                  {(0, 0): None, (0, 1): (5, None), (0, 2): (4, None),
                   (1, 0): (None, 4), (1, 1): 3, (1, 2): 1, (2, 0): (None, 5),
                   (2, 1): 2, (2, 2): 3})]]

    @assert_equality(lambda subject: solver.is_puzzle_solved
                     (solver.solve_puzzle(make_puzzle(subject))))
    @wrap_string_in_io()
    def test_is_puzzle_solved(self):
        return [[': 5: 4:\n:4 _ _\n:5 _ _', False],
                [':   23: 30:   :     :     27: 12: 16:\n'
                 ':16 _   _     :     17:24 _   _   _\n'
                 ':17 _   _     15:29 _     _   _   _\n'
                 ':35 _   _     _     _     _   12: :\n'
                 ':   :7  _     _     7:8   _   _   7:\n'
                 ':   11: 10:16 _     _     _   _   _\n'
                 ':21 _   _     _     _     :5  _   _\n'
                 ':6  _   _     _     :     :3  _   _', True]]


if __name__ == '__main__':
    unittest.main()
